@model Demo.Models.Order

@{
    ViewData["Title"] = "";
}

<div class="order-edit-container">
    <h2>Edit Order</h2>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">@TempData["Success"]</div>
    }

    <form asp-action="Edit">
        <input type="hidden" asp-for="Id" />

        <div asp-validation-summary="ModelOnly" class="alert alert-danger" style="display:@(ViewData.ModelState.IsValid ? "none" : "block")"></div>

        <!-- Member / Guest -->
        <div class="form-row-single">
            <div class="form-label">Member / Guest</div>
            <div class="form-control-area">
                <label class="switch-label">
                    <input type="checkbox" id="isMember" @(Model.MemberId.HasValue ? "checked" : "") />
                    <span>Is Member</span>
                </label>

                <div id="memberInputWrap" class="conditional-field" style="display:@(Model.MemberId.HasValue ? "block" : "none")">
                    <label for="MemberId">Member Id</label>
                    <input asp-for="MemberId" id="MemberId" class="form-control" />
                    <span asp-validation-for="MemberId" class="text-danger"></span>
                </div>
            </div>
        </div>

        <!-- Dine In / TakeAway -->
        <div class="form-row-single">
            <div class="form-label">Dine In / TakeAway</div>
            <div class="form-control-area">
                <label class="switch-label">
                    <input type="checkbox" id="isDineIn" @(Model.IsTakeAway ? "" : "checked") />
                    <span>Is Dine In</span>
                </label>

                <input type="hidden" asp-for="IsTakeAway" id="IsTakeAwayHidden" />

                <div id="tableSelectWrap" class="conditional-field" style="display:@(Model.IsTakeAway ? "none" : "block")">
                    <label asp-for="TableId">Table (for Dine In)</label>
                    <select asp-for="TableId" class="form-control" asp-items="ViewBag.TableId"></select>
                    <span asp-validation-for="TableId" class="text-danger"></span>
                </div>
            </div>
        </div>

        <!-- Is Paid  -->
        <div class="form-row-single">
            <div class="form-label">Paid</div>
            <div class="form-control-area">
                <label class="switch-label">
                    <input class="form-check-input" type="checkbox" asp-for="IsPaid" id="IsPaidCheckbox" />
                    <span>Is Paid</span>
                </label>
            </div>
        </div>

        <!-- Order Date -->
        <div class="form-row-single">
            <div class="form-label">Order Date</div>
            <div class="form-control-area">
                <input id="OrderDate" name="OrderDate" class="form-control"
                       type="datetime-local" step="60"
                       value="@(Model.OrderDate.ToString("yyyy-MM-ddTHH:mm"))" />
                <span asp-validation-for="OrderDate" class="text-danger"></span>
            </div>
        </div>

        <!-- Products -->
        <div class="form-row-single">
            <div class="form-label">Products</div>
            <div class="form-control-area">
                <div class="order-items-block">
                    <div class="order-items-wrapper">
                        <table class="table order-items-table" id="orderItemsTable">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th style="width:110px;">Quantity</th>
                                    <th style="width:120px;" class="text-right">Total</th> 
                                    <th style="width:120px;"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var index = 0;
                                    foreach (var item in Model.OrderItems ?? new List<Demo.Models.OrderItem>())
                                    {
                                        <tr>
                                            <td>
                                                <input type="hidden" name="OrderItemsTemp[@index].Id" value="@item.Id" />
                                                @if (item.IsVoucher)
                                                {
                                                    <span class="voucher-inline">@item.DisplayName</span>
                                                    <input type="hidden" name="OrderItemsTemp[@index].ProductId" value="@item.ProductId" />
                                                    <input type="hidden" name="OrderItemsTemp[@index].IsVoucher" value="true" />
                                                    @if (item.MemberVoucherId.HasValue)
                                                    {
                                                        <input type="hidden" name="OrderItemsTemp[@index].MemberVoucherId" value="@item.MemberVoucherId" />
                                                    }
                                                   
                                                    <input type="hidden" name="OrderItemsTemp[@index].TotalPrice" value="@item.TotalPrice" class="total-input" />
                                                }
                                                else
                                                {
                                                    <select name="OrderItemsTemp[@index].ProductId" class="form-control form-control-sm product-select">
                                                        @foreach (var p in ViewBag.Products as SelectList)
                                                        {
                                                            <option value="@p.Value" selected="@(p.Value == item.ProductId.ToString() ? "selected" : null)">@p.Text</option>
                                                        }
                                                    </select>
                                                    
                                                    <input type="hidden" name="OrderItemsTemp[@index].TotalPrice" value="@item.TotalPrice" class="total-input" />
                                                }
                                            </td>

                                            <td>
                                                @if (item.IsVoucher)
                                                {
                                                    <span>@item.Quantity</span>
                                                    <input type="hidden" name="OrderItemsTemp[@index].Quantity" value="@item.Quantity" />
                                                }
                                                else
                                                {
                                                    <input type="number" name="OrderItemsTemp[@index].Quantity"
                                                           value="@item.Quantity"
                                                           class="form-control form-control-sm qty-input"
                                                           min="1" max="99" />

                                                }
                                            </td>

                                            <td class="text-right">
                                                
                                                RM @item.TotalPrice.ToString("F2")
                                            </td>

                                            <td class="text-right">
                                                <button type="button" class="btn btn-danger btn-sm removeRow">Remove</button>
                                            </td>
                                        </tr>
                                        index++;
                                    }
                                }

                            </tbody>
                        </table>

                        <div class="order-items-actions">
                            <button type="button" id="addRow" class="btn btn-primary btn-sm">Add Product</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group form-actions" style="margin-top:16px;">
            <button type="submit" class="btn btn-primary">Save</button>
			<a asp-action="Index" class="btn btn-secondary">Cancel</a>
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
        </div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // 隐藏字段 IsTakeAway 同步到 UI
        (function initDineAndMember() {
            const isTakeAwayHidden = document.getElementById('IsTakeAwayHidden');
            const isDineInCheckbox = document.getElementById('isDineIn');
            const modelIsTakeAway = (isTakeAwayHidden && (isTakeAwayHidden.value === "True" || isTakeAwayHidden.value === "true"));

            if (isDineInCheckbox) {
                isDineInCheckbox.checked = !modelIsTakeAway;
            }
        })();

        // Member toggle
        const isMemberCheckbox = document.getElementById('isMember');
        const memberInputWrap = document.getElementById('memberInputWrap');
        const memberInput = document.getElementById('MemberId');

        function toggleMemberField() {
            if (isMemberCheckbox.checked) {
                memberInputWrap.style.display = 'block';
            } else {
                memberInputWrap.style.display = 'none';
                if (memberInput) memberInput.value = '';
            }
        }

        isMemberCheckbox.addEventListener('change', toggleMemberField);

        // DineIn toggle
        const isDineInCheckbox = document.getElementById('isDineIn');
        const tableSelectWrap = document.getElementById('tableSelectWrap');
        const isTakeAwayHidden = document.getElementById('IsTakeAwayHidden');

        function toggleDineInField() {
            if (isDineInCheckbox.checked) {
                tableSelectWrap.style.display = 'block';
                if (isTakeAwayHidden) isTakeAwayHidden.value = "False";
            } else {
                tableSelectWrap.style.display = 'none';
                if (isTakeAwayHidden) isTakeAwayHidden.value = "True";
            }
        }

        isDineInCheckbox.addEventListener('change', toggleDineInField);

        toggleMemberField();
        toggleDineInField();
    </script>

    <script>
    document.addEventListener('DOMContentLoaded', function () {
        const productsData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.ProductsList ?? new object[0]));
        let rowIndex = @((Model.OrderItems?.Count() ?? 0));

        const tbody = document.querySelector('#orderItemsTable tbody');
        if (!tbody) return;

        function priceOfProduct(productId) {
            const p = productsData.find(x => Number(x.Id) === Number(productId));
            return p ? Number(p.Price) : 0;
        }

        function updateRowTotal(row) {
            let totalCell = row.querySelector('.row-total');
            if (!totalCell) {
                totalCell = row.querySelector('td:nth-child(3)');
                if (totalCell) totalCell.classList.add('row-total');
            }

            const hiddenTotal = row.querySelector('.total-input');
            const select = row.querySelector('.product-select');
            const qtyInput = row.querySelector('.qty-input');

            if (select && qtyInput) {
                const pid = select.value;
                const qty = Number(qtyInput.value) || 0;
                const unit = priceOfProduct(pid);
                const total = unit * qty;
                if (totalCell) totalCell.innerText = `RM ${total.toFixed(2)}`;
                if (hiddenTotal) hiddenTotal.value = total.toFixed(2);
            } else if (hiddenTotal) {
                const v = Number(hiddenTotal.value) || 0;
                if (totalCell) totalCell.innerText = `RM ${v.toFixed(2)}`;
            } else {
                if (totalCell) totalCell.innerText = 'RM 0.00';
            }
        }

        function reindexRows() {
            const rows = Array.from(tbody.querySelectorAll('tr'));
            rows.forEach((row, i) => {
                row.querySelectorAll('select, input').forEach(input => {
                    if (!input.name) return;
                    input.name = input.name.replace(/OrderItemsTemp\[\d+\]/, `OrderItemsTemp[${i}]`);
                });
                updateRowTotal(row);
            });
            rowIndex = rows.length;
        }

                function bindRowEvents(row) {
            const select = row.querySelector('.product-select');
            const qty = row.querySelector('.qty-input');

            if (select) select.addEventListener('change', () => updateRowTotal(row));
            if (qty) {
                qty.addEventListener('input', () => {
                    let val = parseInt(qty.value, 10);
                    if (isNaN(val) || val < 1) {
                        val = 1;
                    } else if (val > 99) {
                        val = 99;
                    }
                    qty.value = val;
                    updateRowTotal(row);
                });
            }

            if (!row.querySelector('.total-input')) {
                let baseName = `OrderItemsTemp[${rowIndex}].TotalPrice`;
                const hidden = document.createElement('input');
                hidden.type = 'hidden';
                hidden.name = baseName;
                hidden.value = '0.00';
                hidden.className = 'total-input';
                row.appendChild(hidden);
            }

            updateRowTotal(row);
        }


        Array.from(tbody.querySelectorAll('tr')).forEach(bindRowEvents);

        const addBtn = document.getElementById('addRow');
        if (addBtn) {
            addBtn.addEventListener('click', function () {
                const newRow = document.createElement('tr');
                let optionsHtml = '';
                for (let p of productsData) {
                    optionsHtml += `<option value="${p.Id}">${p.Name}</option>`;
                }
                newRow.innerHTML = `
                    <td>
                        <select name="OrderItemsTemp[${rowIndex}].ProductId" class="form-control form-control-sm product-select">
                            ${optionsHtml}
                        </select>
                        <input type="hidden" name="OrderItemsTemp[${rowIndex}].TotalPrice" value="0.00" class="total-input" />
                    </td>
                    <td>
                        <input type="number" name="OrderItemsTemp[${rowIndex}].Quantity"
                               value="1" class="form-control form-control-sm qty-input"
                               min="1" max="99" />
                    </td>
                    <td class="text-right">RM 0.00</td>
                    <td class="text-right"><button type="button" class="btn btn-danger btn-sm removeRow">Remove</button></td>
                `;

                tbody.appendChild(newRow);
                bindRowEvents(newRow);
                rowIndex++;
                reindexRows();
            });
        }

        tbody.addEventListener('click', function (e) {
            if (e.target.classList.contains('removeRow')) {
                e.target.closest('tr').remove();
                reindexRows();
            }
        });

        reindexRows();
    });

        @if (TempData["InvalidMemberId"] != null)
            {
                        <text> alert('Invalid MemberId'); </text>
            }
    </script>


}

<style>
    /* container */
    .order-edit-container {
        max-width: 900px;
        margin: 30px auto;
        padding: 22px;
        border: 1px solid #e6e6e6;
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0 2px 10px rgba(0,0,0,0.06);
    }

        .order-edit-container h2 {
            text-align: center;
            margin-bottom: 18px;
            color: #333;
            font-size: 1.4rem;
        }

    .alert {
        padding: 12px;
        margin-bottom: 18px;
        border-radius: 6px;
        font-size: 14px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .form-row-single {
        display: flex;
        gap: 16px;
        align-items: flex-start;
        margin-bottom: 14px;
        flex-wrap: wrap;
    }

        .form-row-single .form-label {
            width: 160px;
            min-width: 120px;
            font-weight: 700;
            color: #444;
            margin-top: 6px;
        }

        .form-row-single .form-control-area {
            flex: 1 1 520px;
        }

    .conditional-field {
        margin-top: 8px;
    }

    label {
        display: block;
        margin-bottom: 6px;
        font-weight: 600;
        color: #444;
    }

    .form-control {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 15px;
    }

        .form-control:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 0 4px rgba(0,123,255,0.06);
        }

    .text-danger {
        color: #c0392b;
    }

    .switch-label {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        font-weight: 600;
    }

        .switch-label input[type="checkbox"] {
            transform: scale(1.02);
            margin-right: 6px;
        }

    .order-items-block {
        margin-top: 6px;
    }

    .order-items-wrapper {
        border: 1px solid #f0f0f0;
        padding: 10px;
        border-radius: 6px;
        background: #fafafa;
    }

    .order-items-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 14px;
        margin-bottom: 8px;
    }

        .order-items-table th, .order-items-table td {
            padding: 8px 10px;
            border-bottom: 1px solid #eee;
            vertical-align: middle;
            text-align: left;
        }

        .order-items-table thead th {
            font-weight: 700;
            color: #444;
            background: transparent;
        }

    .voucher-inline {
        color: #c0392b;
        font-weight: 700;
    }

    .order-items-actions {
        display: flex;
        justify-content: flex-start;
        gap: 8px;
        margin-top: 6px;
    }

    .btn {
        padding: 8px 14px;
        border-radius: 6px;
        font-weight: 700;
        cursor: pointer;
        border: none;
        text-decoration: none;
    }

    .btn-primary {
        background-color: #e74c3c;
        color: #fff;
    }

        .btn-primary:hover {
            background-color: #c0392b;
        }

    .btn-secondary {
        background-color: #95a5a6;
        color: #fff;
    }

        .btn-secondary:hover {
            background-color: grey;
            color: #fff;
        }

    .btn-danger {
        background-color: #e74c3c;
        color: white;
    }

        .btn-danger:hover {
            background-color: #c0392b;
        }

    .form-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        margin-top: 6px;
    }

    
</style>
